
# coding: utf-8

# <img src="http://orientacion.universia.net.co/imgs2011/imagenes/logo-header-konradlorenz.png">
# #Métodos Numéricos
# ###Algorítmo para Jacobi y Gauss-Seidel
# <b>Nombre:</b> Viviana Márquez<br>
# <b>Código:</b> 614132005<br>
# <b>Profesor:</b> Alberto Forero<br>
# <b>Fecha:</b> Miércoles, 04 de noviembre de 2015<br>
# <hr>

# In[ ]:

from sympy.interactive.printing import init_printing
init_printing(use_unicode=False, wrap_line=False, no_global=True) #Para que imprima en código LaTeX
from sympy.matrices import *


# <hr>

# ##Declarar Matriz 

# In[ ]:

M = Matrix([[3,-1,1], [3,6,2],[3,3,7]])
B = Matrix([[1],[0],[4]])
NumIt = 137 #Número de iteraciones


# ##Jacobi
# 
# $x^{(k)}=T \cdot x^{(k-1)}+C$<br>
# $T = D^{-1}\cdot(L+R)$ and $C=D^{-1}\cdot B$
# 
# 

# In[ ]:

#diagonal

def f(i,j):
    if i == j:
        return M[i,j]
    else:
        return 0
    
D = Matrix(M.shape[0], M.shape[1], f)

#left

def g(i,j):
    if i > j:
        return M[i,j]*-1
    else:
        return 0

L = Matrix(M.shape[0], M.shape[1], g)

# right

def g(i,j):
    if i < j:
        return M[i,j]*-1
    else:
        return 0

R = Matrix(M.shape[0], M.shape[1], g)

# T

T = D.inv() * (L+R)

# C

C = D.inv() * B

# X_0

X_0 = zeros(M.shape[0], 1)

def jacobi(T,X,C):
    return T*X+C

ans = X_0 #Suponinedo que inicia con X=0

for x in range(0, NumIt):
    ans = jacobi(T,ans,C)

print ans


# ##Gauss-Seidel
# 
# $x^{(k)}=T \cdot x^{(k-1)}+C$<br>
# $T = (D-L)^{-1}\cdot R$ and $C=(D-L)^{-1}\cdot B$

# In[ ]:

#diagonal

def f(i,j):
    if i == j:
        return M[i,j]
    else:
        return 0
    
D = Matrix(M.shape[0], M.shape[1], f)

#left

def g(i,j):
    if i > j:
        return M[i,j]*-1
    else:
        return 0

L = Matrix(M.shape[0], M.shape[1], g)

# right

def g(i,j):
    if i < j:
        return M[i,j]*-1
    else:
        return 0

R = Matrix(M.shape[0], M.shape[1], g)

# T

T = (D-L).inv() * R

# C

C = (D-L).inv() * B

# X_0

X_0 = zeros(M.shape[0], 1)

def gauss(T,X,C):
    return T*X+C

ans = X_0 #Suponinedo que inicia con X=0

for x in range(0, NumIt):
    ans = gauss(T,ans,C)

print ans


# ##Método Tarea
# 
# $x^{(k)}=T \cdot x^{(k-1)}+C$<br>
# $T = (D-R)^{-1}\cdot L$ and $C=(D-R)^{-1}\cdot B$

# In[ ]:

#diagonal

def f(i,j):
    if i == j:
        return M[i,j]
    else:
        return 0
    
D = Matrix(M.shape[0], M.shape[1], f)

#left

def g(i,j):
    if i > j:
        return M[i,j]*-1
    else:
        return 0

L = Matrix(M.shape[0], M.shape[1], g)

# right

def g(i,j):
    if i < j:
        return M[i,j]*-1
    else:
        return 0

R = Matrix(M.shape[0], M.shape[1], g)

# T

T = (D-R).inv() * L

# C

C = (D-R).inv() * B

# X_0

X_0 = zeros(M.shape[0], 1)

def prop(T,X,C):
    return T*X+C

ans = X_0 #Suponinedo que inicia con X=0

for x in range(0, NumIt):
    ans = gauss(T,ans,C)

print ans

